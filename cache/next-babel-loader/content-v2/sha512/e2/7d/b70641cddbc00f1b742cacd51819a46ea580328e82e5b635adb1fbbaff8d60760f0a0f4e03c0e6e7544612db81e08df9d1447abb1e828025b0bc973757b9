{"ast":null,"code":"import React from 'react';\n/**\n * Helper hook to handle values that may need to be story throughout multiple sessions\n * @param key key value that exist in localstorage\n * @param initialValue initial value to be set if none is found\n */\n\nexport const usePersistedState = (key, initialValue) => {\n  const [value, setValue] = React.useState(initialValue);\n  const retrievePersistedValue = React.useCallback(() => {\n    try {\n      const persistedString = localStorage.getItem(key);\n\n      if (!persistedString) {\n        return;\n      }\n\n      const persistedValue = JSON.parse(persistedString);\n      setValue(persistedValue);\n    } catch (err) {// Does nothing\n    }\n  }, []);\n  React.useEffect(() => {\n    retrievePersistedValue();\n  }, []);\n  React.useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value]);\n  return [value, setValue];\n};","map":null,"metadata":{},"sourceType":"module"}