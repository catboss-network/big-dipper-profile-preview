{"ast":null,"code":"import _slicedToArray from \"/home/runner/work/big-dipper-profile-preview/big-dipper-profile-preview/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { lightTemplate, darkTemplate } from '@styles';\nimport { usePersistedState } from '@hooks';\n\n/**\n *\n * @param initialState\n */\nexport var useTheme = function useTheme(initialState) {\n  var _useState = useState(initialState.theme),\n      theme = _useState[0],\n      setTheme = _useState[1];\n\n  var _usePersistedState = usePersistedState('themeSelection', initialState.themeSelection),\n      _usePersistedState2 = _slicedToArray(_usePersistedState, 2),\n      themeSelection = _usePersistedState2[0],\n      setThemeSelection = _usePersistedState2[1];\n\n  var themeList = ['light', 'dark', 'deuteranopia', 'tritanopia'];\n  var themeDictionary = {\n    light: lightTemplate,\n    dark: darkTemplate\n  };\n  useEffect(function () {\n    var isClient = true;\n\n    if (themeSelection === 'device') {\n      var _window, _window$matchMedia;\n\n      if (isClient && (_window = window) !== null && _window !== void 0 && (_window$matchMedia = _window.matchMedia('(prefers-color-scheme: dark)')) !== null && _window$matchMedia !== void 0 && _window$matchMedia.matches) {\n        setTheme('dark');\n      }\n    } else if (themeDictionary[themeSelection]) {\n      setTheme(themeSelection);\n    } else {\n      setTheme('light');\n    }\n  }, [themeSelection]);\n\n  var changeTheme = function changeTheme(value) {\n    if (themeDictionary[value]) {\n      setThemeSelection(value);\n    }\n  };\n\n  return {\n    theme: theme,\n    muiTheme: createMuiTheme(themeDictionary[theme] || lightTemplate),\n    themeSelection: themeSelection,\n    themeList: themeList,\n    themeDictionary: themeDictionary,\n    changeTheme: changeTheme\n  };\n};","map":null,"metadata":{},"sourceType":"module"}