{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { lightTemplate } from '@styles';\nimport { useTheme } from './hooks';\nconst initialThemeState = {\n  theme: 'light',\n  themeSelection: 'device',\n  muiTheme: createMuiTheme(lightTemplate),\n  themeList: []\n};\nconst SettingsContext = /*#__PURE__*/React.createContext(_objectSpread({}, initialThemeState));\n\nconst SettingsProvider = props => {\n  const {\n    children\n  } = props;\n  const {\n    theme,\n    muiTheme,\n    themeSelection,\n    changeTheme,\n    themeList\n  } = useTheme(initialThemeState);\n  return __jsx(SettingsContext.Provider, {\n    value: {\n      theme,\n      themeSelection,\n      muiTheme,\n      changeTheme,\n      themeList\n    }\n  }, children);\n};\n\nconst useSettingsContext = () => React.useContext(SettingsContext);\n\nexport { SettingsContext, SettingsProvider, useSettingsContext };","map":null,"metadata":{},"sourceType":"module"}